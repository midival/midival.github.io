"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1903],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(g,r(r({ref:t},u),{},{components:n})):a.createElement(g,r({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={slug:"midival-introduction",title:"Introducing MIDIVal: the easiest way to interact with MIDI in your browser",authors:["kulak"],tags:["midival","release"]},r=void 0,l={permalink:"/blog/midival-introduction",source:"@site/blog/2021-08-13-introduction/index.md",title:"Introducing MIDIVal: the easiest way to interact with MIDI in your browser",description:"MIDIVal Cover",date:"2021-08-13T00:00:00.000Z",formattedDate:"August 13, 2021",tags:[{label:"midival",permalink:"/blog/tags/midival"},{label:"release",permalink:"/blog/tags/release"}],readingTime:3.84,hasTruncateMarker:!0,authors:[{name:"Kacper Kula",title:"Author and Maintainer of MIDIVal",url:"https://github.com/kulak-at",imageURL:"https://avatars.githubusercontent.com/u/2923943?v=4",key:"kulak"}],frontMatter:{slug:"midival-introduction",title:"Introducing MIDIVal: the easiest way to interact with MIDI in your browser",authors:["kulak"],tags:["midival","release"]},prevItem:{title:"MIDIVal release 0.0.14",permalink:"/blog/midival-0-0-14"}},s={authorsImageUrls:[void 0]},c=[{value:"Getting started",id:"getting-started",level:2},{value:"Main goals",id:"main-goals",level:2},{value:"High-Level API",id:"high-level-api",level:3},{value:"Platform agnosticism",id:"platform-agnosticism",level:3},{value:"Extendability",id:"extendability",level:3},{value:"MIDIVal 101 \u2014 interacting with your device",id:"midival-101--interacting-with-your-device",level:2},{value:"Installation",id:"installation",level:3},{value:"Sending MIDI messages to your device",id:"sending-midi-messages-to-your-device",level:3},{value:"Reading MIDI messages",id:"reading-midi-messages",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"MIDIVal Cover",src:n(2048).Z,width:"2000",height:"1125"})),(0,i.kt)("p",null,"MIDI is an amazing protocol. For almost 40 years it\u2019s been allowing musicians to express their creativity, was one of the factors for the rapid development of electronic music and completely revolutionized the music industry. Because it is a low-level protocol, using it directly might be a bit challenging. Web MIDI API provides an interface to communicate with both input and output MIDI devices, but there is no abstraction layer on top of basic transport methods. To fix this problem, I have created MIDIVal \u2014 platform-agnostic library for all your MIDI needs. It provides high-level methods and can greatly simplify your workflow. Moreover, as it was designed to be platform-agnostic in mind, you can use the same code to communicate with your MIDI devices in the browsers ), node.js, and even in React Native (plugin in development)."),(0,i.kt)("h2",{id:"getting-started"},"Getting started"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@midival/core"},"MIDIVal can be found in the npm (node package manager)")," and it\u2019s split into several packages. The core one you are most likely to use is @midival/core. It provides the main functionality of the library and browser bindings. To use it in node or React Native environment you'd need to install adapters included in ",(0,i.kt)("inlineCode",{parentName:"p"},"@midival/node")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@midival/react-native")," respectively (The React Native library is still under development, get in touch if you'd like to use it or want to helphelp with development!)."),(0,i.kt)("h2",{id:"main-goals"},"Main goals"),(0,i.kt)("p",null,"I designed MIDIVal with few main goals in mind:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"High-level API"),(0,i.kt)("li",{parentName:"ul"},"Platform agnosticism"),(0,i.kt)("li",{parentName:"ul"},"Extendability")),(0,i.kt)("h3",{id:"high-level-api"},"High-Level API"),(0,i.kt)("p",null,"The main goal of the project is to provide a high-level API \u2014 methods represent music concepts like keypress, control change, etc. API can be easily used without prior knowledge of the MIDI protocol and it\u2019s a perfect choice if you want to quickly prototype a web synthesizer, hack quickly your idea but can be also used in production."),(0,i.kt)("h3",{id:"platform-agnosticism"},"Platform agnosticism"),(0,i.kt)("p",null,"No matter if you want to create a website that interacts with MIDI, a node.js application, or a mobile application written in React Native, you should be able to use MIDIVal in the same way. All implementation details are hidden away in the abstractions and switching between platforms requires minimal setup. The browser implementation is already public and the node and React Native bindings will follow."),(0,i.kt)("h3",{id:"extendability"},"Extendability"),(0,i.kt)("p",null,"MIDI devices come in many different shapes and forms \u2014 you can use the same messages to control your synthesizer, software effect, set control surface lights, and much more. It is not possible to write a single library to cover all devices and uses. That\u2019s why MIDIVal can be easily extended. You can easily extend the basic functionality and if you need more control over the messages you can still send raw data, including SysEx."),(0,i.kt)("h2",{id:"midival-101--interacting-with-your-device"},"MIDIVal 101 \u2014 interacting with your device"),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"To install MIDIVal you need to install ",(0,i.kt)("inlineCode",{parentName:"p"},"@midival/core")," package using your favorite package manager:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm --save install @midival/core\n# OR\nyarn add @midival/core\n")),(0,i.kt)("h3",{id:"sending-midi-messages-to-your-device"},"Sending MIDI messages to your device"),(0,i.kt)("p",null,"Let\u2019s get started with MIDIVal and send a note to the first connected MIDI interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import MIDIVal, { MIDIValOutput } from "@midival/core";\n\nMIDIVal.connect()\n.then(async ({outputs}) => {\n  const firstInput = new MIDIValOutput(outputs[0]);\n  firstInput.sendNoteOn(60, 128);\n  await delay(1000);\n  firstInput.sendNoteOff(60);\n});\n')),(0,i.kt)("p",null,"The code above waits for the MIDIVal interface to be connected then connects to the first output and plays the C4 note (MIDI Value 60) for a second. Implementation of delay function was omitted for simplicity. You can also send other parameters like Control Change and Program Change easily:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"firstInput.sendControlChange(7, 100); // changing channel volume: Control Number 7\nfirstInput.sendProgramChange(39); // sets Synth Bass 1 (if instrument implements General MIDI instruments)\n")),(0,i.kt)("h3",{id:"reading-midi-messages"},"Reading MIDI messages"),(0,i.kt)("p",null,"Similarly, you can read MIDI messages sent by your device (for example MIDI controller, control surface, etc)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import MIDIVal, { MIDIValInput } from "@midival/core";\n\nMIDIVal.connect()\n.then(async ({ inputs }) => {\n    const input = new MIDIValInput(inputs[0]);\n  input.onAllNoteOn((note, midiMessage) => {\n    console.log(`Note ${note} has been pressed`);\n  });\n});\n')),(0,i.kt)("p",null,"The code above connects to the first input interface and subscribes to all notes on messages. All .onX methods return callbacks which can be used to unsubscribe. Similarly, you can subscribe to messages for notes off, control change, program change, and even arbitral SysEx data. If you want to filter out the messages (listen to a specific key being pressed or a specific control key), you can do so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"input.onControlChange(5, (midiMessage) => {\n    console.log(`Portamento changed to: ${midiMessage.data2}`);\n})\n")),(0,i.kt)("p",null,"The code above listens to all portamento changes (channel 5)."),(0,i.kt)("p",null,"Those are just a few examples of how to get started. For full documentation head to the ",(0,i.kt)("a",{parentName:"p",href:"https://midival.github.io/core/"},"official documentation"),"."))}p.isMDXComponent=!0},2048:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cover-110d3d2552c4c488b1968bc2f6497b6b.webp"}}]);