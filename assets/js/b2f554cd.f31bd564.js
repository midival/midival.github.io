"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"mpe-support-added","metadata":{"permalink":"/blog/mpe-support-added","source":"@site/blog/2023-05-22/index.md","title":"MIDIVal 0.1 release \u2014 now with MPE support!","description":"MIDIVal MPE Cover","date":"2023-05-22T00:00:00.000Z","formattedDate":"May 22, 2023","tags":[{"label":"midival","permalink":"/blog/tags/midival"},{"label":"mpe","permalink":"/blog/tags/mpe"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.405,"hasTruncateMarker":true,"authors":[{"name":"Kacper Kula","title":"Author and Maintainer of MIDIVal","url":"https://github.com/kulak-at","imageURL":"https://avatars.githubusercontent.com/u/2923943?v=4","key":"kulak"}],"frontMatter":{"slug":"mpe-support-added","title":"MIDIVal 0.1 release \u2014 now with MPE support!","authors":["kulak"],"tags":["midival","mpe","release"]},"nextItem":{"title":"New MIDIVal releases: core 0.0.17, node 0.0.2 and react-native!","permalink":"/blog/midival-0-0-17-released"}},"content":"![MIDIVal MPE Cover](./cover.webp)\\n\\nMIDIVal just got a big version bump with exciting new functionality! You can now use the MIDIVal library to send and receive MIDI Polyphonic Expression messages. It is the only high level JavaScript library to add support for this protocol. Thanks to portability of MIDIVal, you can use it in your web, node and react native projects!\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## What is MPE?\\nMPE is an extension of the MIDI 1 protocol. MPE, or MIDI Polyphonic Expression, adds the ability to vary pressure, pitch and timbre for each note independently (or in fact any 3 dimensions of your sound). It allows for way more expression in your performances.\\n\\n\\n![Example of 3 notes chord sent to Ableton Live using MIDIVal 0.1. Each note had its pitch bend, pressure and timbre varied independently.](./ableton.webp)\\n\\nThe specification describes a low-level protocol for communication but fortunately, with the new version of MIDIVal you can use might more user-friendly interface and not care about low-level implementation details.\\n\\n## Getting started with MPE in MIDIVal\\n\\nTo install the new MIDIVal version, run `npm` or `yarn` targeting version 0.1:\\n\\n```bash\\nnpm install @midival/core@0.1\\n# Or using YARN\\nyarn add @midival/core@0.1\\n```\\n\\nTo start communicating with MPE you need to select which MIDI device you want to use. To do so, you can list all input and output devices (same as before in earlier versions of the library):\\n\\n```ts\\nimport { MIDIVal } from \\"@midival/core\\"\\n\\nMIDIVal.connect()\\n.then(access => {\\n const { inputs, outputs } = access\\n // Select which input or output you want to use.\\n})\\n```\\n\\n### Sending MPE messages\\n\\nTo send MPE messages you need to instantiate `MPEMIDIValOutput` and pass the device you want to use. MPE documentation allows you to define both the lower and upper zone for your device which can be used to split the channel into 2 separately addressable keyboards.\\n\\nInstantiating `MPEInputOutput` will send all necessary setup messages.\\n\\n```ts\\nimport { MPEMidivalOutput } from \\"@midival/core/dist/mpe\\"\\nconst mpeOutput = new MPEMidivalOutput(output,\\n\\t{ lowerZoneSize: 7, upperZoneSize: 3 }\\n)\\n\\n```\\n\\nOnce the object is set up, you can start sending notes. MIDIVal library will take care of proper routing for your message to corresponding channels.\\n\\n```ts\\nconst note: ActiveNote = mpeOutput.lowerZone.sendNoteOn(64, 120); // [note, velocity]\\n```\\n\\nUsing `ActiveNote` object you can modify the note during its lifetime and also send noteOff signal:\\n\\n```ts\\nnote.changeBend(-0.2);\\nnote.changeTimbre(20);\\nnote.changePressure(50);\\n\\n// Or if you prefer using coordinates system x,y,z\\nnote.x = -0.2;\\nnote.y = 20;\\nnote.z = 50;\\n\\n// when you want to send note off\\nnote.noteOff()\\n```\\n\\n### Receiving MPE messages\\n\\n```ts\\nconst input = new MPEMidivalInput(new MIDIValInput(input));\\ninput.onLowerZoneUpdate(lowerZone => {\\n  if (!lowerZone) {\\n     console.log(\\"Lower Zone was disabled\\");\\n     return;\\n  }\\n  lowerZone.onNoteOn(note => {\\n    // React to note being pressed.\\n  })\\n  lowerZone.onNoteOff(note => {\\n      // React to note being depressed\\n  })\\n  lowerZone.onMemberPitchBend(bend => {\\n      // React to note being bent\\n  })\\n  lowerZone.onMemberTimbre(tim => {\\n     // React to notes timbre being changed\\n  })\\n  lowerZone.onMemberPressure(pres => {\\n     // React to notes pressure being changed\\n  })\\n})\\n```\\n\\nSimilarly, you can react to pitch, timbre and pressure change for the whole zone using `onMasterPitchBend`, `onMasterTimbre`, `onMasterPressure`.\\n\\n## Test it now\\n\\nIf you have DAW with MPE support you can use the [MIDIVal Demo](https://midival.github.io/demos/mpe/) page to send sample MPE messages to it. The website uses the latest version of MIDIVal to send messages. You can enable LFO modulation for each of the notes independently.\\n\\n![Simple test showcasing MIDIValMPE functionality](./demo.webp)\\n\\nIf you have an MPE input device, you can use the same website to check notes received, their corresponding channels and modulations.\\n\\n## API Docs\\n\\nFor full API documentation of the MPE functionality, [visit @midival/core MPE documentation page](https://midival.github.io/core/modules/mpe.html).\\n\\n## Join the community\\n\\nWith the release of MIDIVal 0.1.0, I have also launched a Discord channel for anyone interested in the library. If you have questions about the library, want to contribute or even just have a casual chat about MIDI or anything music related, join and drop the message there!\\n\\n[Join Discord Channel](https://discord.gg/5GYK4VhQQ8)\\n\\nFor more information about MIDIVal, Web MIDI, Web Audio and TypeScript articles, remember to follow me here on Medium!"},{"id":"midival-0-0-17-released","metadata":{"permalink":"/blog/midival-0-0-17-released","source":"@site/blog/2022-06-21/index.md","title":"New MIDIVal releases: core 0.0.17, node 0.0.2 and react-native!","description":"MIDIVal Cover","date":"2022-06-21T00:00:00.000Z","formattedDate":"June 21, 2022","tags":[{"label":"midival","permalink":"/blog/tags/midival"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":2.755,"hasTruncateMarker":true,"authors":[{"name":"Kacper Kula","title":"Author and Maintainer of MIDIVal","url":"https://github.com/kulak-at","imageURL":"https://avatars.githubusercontent.com/u/2923943?v=4","key":"kulak"}],"frontMatter":{"slug":"midival-0-0-17-released","title":"New MIDIVal releases: core 0.0.17, node 0.0.2 and react-native!","authors":["kulak"],"tags":["midival","release"]},"prevItem":{"title":"MIDIVal 0.1 release \u2014 now with MPE support!","permalink":"/blog/mpe-support-added"},"nextItem":{"title":"MIDIVal 0.0.16: now with MIDI Clock support","permalink":"/blog/midival-0-0-16-with-midi-clock-support"}},"content":"![MIDIVal Cover](./cover.webp)\\n\\nIn the last couple of weeks MIDIVal got plenty of new updates:\\n\\n- ` @midival/core` got 0.0.17 release with fixed onConnected / onDisconnected handlers\\n- `@midival/node` got 0.0.2 release with Virtual Ports, onConnected / onDisconnected listeners and new examples in the repository to get you started\\n- `@midival/react-native` was released!\\n- MIDIVal has now brand new website too!\\n\\nBelow I\u2019ll dive deeper into each of those updates and give you quick overview of the changes.\\n\\n\x3c!--truncate--\x3e\\n\\n## Updates to @midival/core\\n\\nUpdate to `@midival/core` is small, but if you want to listen to newly connected devices, I\u2019ve got something for you! Now you can subscribe for events when MIDI Device was connected or disconnected.\\n\\n```ts\\nimport { MIDIVal } from \\"@midival/core\\";\\nfunction async connect() {\\n\\tawait MIDIVal.connect();\\n\\tMIDIVal.onInputDeviceConnected(newInputDevice => {\\n\\t\\tconsole.log(\\"Input Connected\\", newInputDevice.name);\\n\\t});\\n\\tMIDIVal.onInputDeviceDisconnected(disconnectedInputDevice => {\\n\\t\\tconsole.log(\\"Input Disconnected\\", disconnectedInputDevice.name);\\n\\t});\\n\\tMIDIVal.onOutputDeviceConnected(newOutputDevice => {\\n\\t\\tconsole.log(\\"Output Connected\\", newOutputDevice.name);\\n\\t});\\n\\tMIDIVal.onOutputDeviceDisconnected(disconnectedOutputDevice => {\\n\\t\\tconsole.log(\\"Output Disconnected\\", disconnectedOutputDevice.name);\\n\\t});\\n}\\nconnect();\\n```\\n\\nYou can install new version via yarn or npm:\\n\\n```bash\\nyarn add @midival/core@0.0.17\\n### OR\\nnpm install --save @midival/core@0.0.17\\n```\\n\\n## Updates to @midival/node\\nNew release of MIDIVal core brings support for `on(In|Out)putDevice(Dis)Connected` listeners described above. You can listen to new devices the same way, no matter if you are connecting from the browser or from the Node.js environment!\\n\\nMoreover, new version adds ability to create new Virtual Inputs and Outputs! Those outputs are registered in your system and are accessible by any program like DAWs, Librarians, etc. This opens up many possibilities like:\\n\\n- Dedicated Virtual MIDI Out Port that acts as a sequencer sending notes to other programs\\n- Dedicated Virtual MIDI Input Port for your Node.js synthesiser which can be played from any MIDI-enabled software on your machine\\n- Virtual MIDI Out Port that combines messages from multiple sources\\n\\nThose are just some of the use-cases for this feature. Let\u2019s see how to use it:\\n\\n```ts\\nmport { MIDIVal } from \\"@midival/core\\";\\nimport {NodeMIDIAccess} from \\"../src/index\\";\\nimport * as midi from \\"midi\\";\\nconst nodeAccess = new NodeMIDIAccess(midi);\\nMIDIVal.configureAccessObject(nodeAccess);\\nMIDIVal.connect()\\n.then(() => {\\n\\t// Creating virtual Input Port\\n\\tconst virtualInput = nodeAccess.createVirtualInputPort(\\"Virtual Input\\");\\n\\t\\n\\t// Creating virtual Output Port\\n\\tconst virtualOutput = nodeAccess.createVirtualOutputPort(\\"Virtual Output\\");\\n});\\n```\\n\\nNew release also includes sample example programs to get you started with using MIDIVal in Node.js environment!\\n\\nYou can install new version via yarn or npm:\\n\\n```bash\\nyarn add @midival/node@0.0.2\\n### OR\\nnpm install --save @midival/node@0.0.2\\n```\\n\\n## Release for @midival/react-native\\nBeta version of React Native adapter has been released! You can now use exactly same code to write synthesisers for iOS or Android using React Native.\\n\\nRepository contains sample project to get you started.\\n\\nYou can install it using yarn or npm. Project is using React Native autolink so all required Podfiles for iOS should be linked automatically.\\n\\n```bash\\nyarn add @midival/react-native\\n### OR\\nnpm install --save @midival/react-native\\n```\\n\\n## New Website\\n[MIDIVal has a new website now](https://midival.github.io/) to help you get started with the project. I plan to expand it with helpful resources soon but you can use it already to find links to code References and basic code snippets to start hacking!\\n\\n![Website](./website.webp)\\n\\nHave you used MIDIVal already? If so, I am excited hearing from you what do you use it for! As always, contributions and bug reports are welcome.\\n\\nHappy coding!"},{"id":"midival-0-0-16-with-midi-clock-support","metadata":{"permalink":"/blog/midival-0-0-16-with-midi-clock-support","source":"@site/blog/2022-04-26/index.md","title":"MIDIVal 0.0.16: now with MIDI Clock support","description":"MIDIVal Cover","date":"2022-04-26T00:00:00.000Z","formattedDate":"April 26, 2022","tags":[{"label":"midival","permalink":"/blog/tags/midival"},{"label":"release","permalink":"/blog/tags/release"},{"label":"midi clock","permalink":"/blog/tags/midi-clock"}],"readingTime":2.63,"hasTruncateMarker":true,"authors":[{"name":"Kacper Kula","title":"Author and Maintainer of MIDIVal","url":"https://github.com/kulak-at","imageURL":"https://avatars.githubusercontent.com/u/2923943?v=4","key":"kulak"}],"frontMatter":{"slug":"midival-0-0-16-with-midi-clock-support","title":"MIDIVal 0.0.16: now with MIDI Clock support","authors":["kulak"],"tags":["midival","release","midi clock"]},"prevItem":{"title":"New MIDIVal releases: core 0.0.17, node 0.0.2 and react-native!","permalink":"/blog/midival-0-0-17-released"},"nextItem":{"title":"MIDIVal release 0.0.14","permalink":"/blog/midival-0-0-14"}},"content":"![MIDIVal Cover](./cover.webp)\\n\\nThe new version of MIDIVal just landed bringing an easier way to use MIDI Clock in your app.\\n\\n\x3c!--truncate--\x3e\\n\\nIf you didn\u2019t come across MIDIVal before, it is a library that simplifies communication with MIDI devices from your JavaScript / TypeScript code by providing a high-level interface. It allows you to communicate with synthesizers (or any other MIDI devices) in an idiomatic way. You can read more about library itself in my initial post here.\\n\\n// CARD LINK\\n\\n## Listening to MIDI Clock Messages\\n\\nNow you can listen to all MIDI Clock messages like Clock Start, Stop and Continue as well as to individual pulse messages (sent 24 times every quarter note). This allows you to synchronize your Web-based music with an external clock from your synthesizer (or your DAW), create real-time applications based on the clock, or even send it over the web (or whatever else you can imagine).\\n\\n```ts\\nmidivalInputObject.onClockStart(() => {\\n    console.log(\'MIDI Clock Started\');\\n});\\n\\nmidivalInputObject.onClockStop(() => {\\n    console.log(\'MIDI Clock Stoped\');\\n});\\n\\nmidivalInputObject.onClockContinue(() => {\\n    console.log(\'MIDI Clock Continued\');\\n});\\n\\nmidivalInputObject.onClockPulse(() => {\\n    console.log(\'Pulse\');\\n});\\n```\\n\\nMoreover, if you want to compute and use tempo (beats per minute) in which your MIDI device is sending those messages, you can use MIDIVal to automatically compute that for you. Then you can access it anytime:\\n\\n```ts\\nconst midivalInputObject = new MIDIValInput(input, {\\n    computeClockTempo: true, // needs to be set on initialisation to make sure MIDIVal computes it.\\n});\\n\\n// Whenever you want to use it\\nconsole.log(`Current Tempo is ${midivalInputObject.tempo}BPM`);\\n```\\n\\nIf you forget to set `computeClockTempo` option, getting tempo will throw `MIDIValConfigurationError` on access attempt.\\n\\n## Sending MIDI Clock Messages\\n\\nYou can also send MIDI Messages to your MIDI Output device now. The following new methods are available:\\n\\n- `sendClockStart()`\\n- `sendClockStop()`\\n- `sendClockContinue()`\\n- `sendClockPulse()`\\n\\nThese allow you to manually control the clock. This can be a great tool when you don\u2019t have any physical MIDI device with a built-in clock/sequencer or when you want to have full control over the clock from your JavaScript / TypeScript code. Remember that you have to send pulse messages manually 24 times every quarter note, for example like the following:\\n\\n```ts\\nlet clockHandle = null;\\nconst BPM = 120;\\n\\nmidiStartButton.addEventListener(\\"click\\", () => {\\n    console.log(\\"START\\");\\n    midiOut.sendClockStart();\\n    clockHandle = setInterval(() => {\\n        midiOut.sendClockPulse();\\n    }, 60 * 1000 / (BPM * 24));\\n});\\n\\nmidiStopButton.addEventListener(\\"click\\", () => {\\n    console.log(\\"STOP\\");\\n    midiOut.sendClockStop();\\n    clearInterval(clockHandle);\\n});\\n```\\n\\n## Other Changes\\n\\nBesides adding MIDI Clock messages extended support, new versions of MIDIVal have been reworked from the ground up to incorporate my other project, Omnibus \u2014 a simple implementation of platform-agnostic Event Bus. The initial implementation of the event bus in MIDIVal was a direct inspiration for this library and I decided to make it reusable in different projects.\\n\\n// OMNI LINK\\n\\nIn addition, MIDI Callbacks are not much nicely typed and Note On/Off, CC and Program Change messages get the parameters nicely mapped to logical names:\\n\\n```ts\\n// before\\nmidiInput.onNoteOn(message => {\\n\\tconsole.log(\\"Note\\", message.data1);\\n\\tconsole.log(\\"Velocity\\", message.data2);\\n});\\n\\n// now\\nmidiInput.onNoteon(message => {\\n\\tconsole.log(\\"Note\\", message.note);\\n\\tconsole.log(\\"Velocity\\", message.velocity);\\n});\\n```\\n\\nThis can allow for tidier code without having to bother about MIDI message internals even more."},{"id":"midival-0-0-14","metadata":{"permalink":"/blog/midival-0-0-14","source":"@site/blog/2021-09-07-release-0014/index.md","title":"MIDIVal release 0.0.14","description":"Pitch Bend, manufacturer field and filtering MIDI devices has landed!","date":"2021-09-07T00:00:00.000Z","formattedDate":"September 7, 2021","tags":[{"label":"midival","permalink":"/blog/tags/midival"},{"label":"release","permalink":"/blog/tags/release"},{"label":"midi clock","permalink":"/blog/tags/midi-clock"}],"readingTime":1.615,"hasTruncateMarker":true,"authors":[{"name":"Kacper Kula","title":"Author and Maintainer of MIDIVal","url":"https://github.com/kulak-at","imageURL":"https://avatars.githubusercontent.com/u/2923943?v=4","key":"kulak"}],"frontMatter":{"slug":"midival-0-0-14","title":"MIDIVal release 0.0.14","authors":["kulak"],"tags":["midival","release","midi clock"]},"prevItem":{"title":"MIDIVal 0.0.16: now with MIDI Clock support","permalink":"/blog/midival-0-0-16-with-midi-clock-support"},"nextItem":{"title":"Introducing MIDIVal: the easiest way to interact with MIDI in your browser","permalink":"/blog/midival-introduction"}},"content":"Pitch Bend, manufacturer field and filtering MIDI devices has landed!\\n![MIDIVal Cover](./cover.webp)\\n\\nThe new version of MIDIVal has been just released with many improvements! Here\u2019s the summary.\\n\\n\x3c!--truncate--\x3e\\n\\n## Support for Pitch Bend\\n\\nPitch bend in an expression tool allowing you to shift up and down notes that you are playing, commonly used for bend or vibratto effect. MIDI standard provides a way to send pitch bend messages as 14-bit numbers, but because the whole protocol is 8-bit, a bit more extra work is needed to encode and decode such messages. The new MIDIVal version converts those messages to the range between -1.0 and 1.0 so you don\u2019t have to worry about the implementation details anymore. It works seemlesly with both MIDIValInput and MIDIValOutput object.\\n\\n```ts\\ninput.onPitchBend((bend, midiMessage) => {\\n   console.log(\\"BEND:\\", bend); // value in range of <-1.0, 1.0>\\n});\\n\u200b\\noutput.sendPitchBend(0.5);\\n```\\n\\n`.sendPitchBend` throws an error when trying to send a value from outside the range.\\n\\n## Manufacturer field is now exposed\\n`IMIDIInput` and `IMIDIOutput` (as well as their implementations) now expose manufacturer property which can be helpful when filtering the devices you want to connect to.\\n\\n## Ability to listen to subset of devices\\nSometimes you want to listen to a specific device being connected or a device from a specific manufacturer. Now you can do it using either exact string matching or regex in the following way:\\n\\n```ts\\nMIDIVal.onInputDeviceWithConfigConnected({\\n  manufacturer: /Korg/i,\\n  name: /^minilogue/i\\n}, (device: MIDIValInput) => {\\n   console.log(device);\\n});\\n```\\n\\n## Changes to `.onLocalControlChange`\\nThe callback for `onLocalControlChange` method now takes boolean as a first parameter.\\n\\n## New Methods\\nAdded new methods for Control Change modes:\\n\\n- `.onOmniModeOff`\\n- .`onOmniModeOn`\\n- `.onMonoModeOn`\\n- `.onPolyModeOn`\\n\\n## What\u2019s next?\\n\\nFor the next version of the library I plan to add methods for handling MIDI Clock \u2014 this is an exciting milestone that will enable to synchronise your browser with your MIDI device beat or send the clock signal to the device."},{"id":"midival-introduction","metadata":{"permalink":"/blog/midival-introduction","source":"@site/blog/2021-08-13-introduction/index.md","title":"Introducing MIDIVal: the easiest way to interact with MIDI in your browser","description":"MIDIVal Cover","date":"2021-08-13T00:00:00.000Z","formattedDate":"August 13, 2021","tags":[{"label":"midival","permalink":"/blog/tags/midival"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.84,"hasTruncateMarker":true,"authors":[{"name":"Kacper Kula","title":"Author and Maintainer of MIDIVal","url":"https://github.com/kulak-at","imageURL":"https://avatars.githubusercontent.com/u/2923943?v=4","key":"kulak"}],"frontMatter":{"slug":"midival-introduction","title":"Introducing MIDIVal: the easiest way to interact with MIDI in your browser","authors":["kulak"],"tags":["midival","release"]},"prevItem":{"title":"MIDIVal release 0.0.14","permalink":"/blog/midival-0-0-14"}},"content":"![MIDIVal Cover](./cover.webp)\\n\\n\\nMIDI is an amazing protocol. For almost 40 years it\u2019s been allowing musicians to express their creativity, was one of the factors for the rapid development of electronic music and completely revolutionized the music industry. Because it is a low-level protocol, using it directly might be a bit challenging. Web MIDI API provides an interface to communicate with both input and output MIDI devices, but there is no abstraction layer on top of basic transport methods. To fix this problem, I have created MIDIVal \u2014 platform-agnostic library for all your MIDI needs. It provides high-level methods and can greatly simplify your workflow. Moreover, as it was designed to be platform-agnostic in mind, you can use the same code to communicate with your MIDI devices in the browsers ), node.js, and even in React Native (plugin in development).\\n\\n\x3c!--truncate--\x3e\\n\\n## Getting started\\n\\n[MIDIVal can be found in the npm (node package manager)](https://www.npmjs.com/package/@midival/core) and it\u2019s split into several packages. The core one you are most likely to use is @midival/core. It provides the main functionality of the library and browser bindings. To use it in node or React Native environment you\'d need to install adapters included in `@midival/node` or `@midival/react-native` respectively (The React Native library is still under development, get in touch if you\'d like to use it or want to helphelp with development!).\\n\\n## Main goals\\n\\nI designed MIDIVal with few main goals in mind:\\n\\n- High-level API\\n- Platform agnosticism\\n- Extendability\\n\\n### High-Level API\\nThe main goal of the project is to provide a high-level API \u2014 methods represent music concepts like keypress, control change, etc. API can be easily used without prior knowledge of the MIDI protocol and it\u2019s a perfect choice if you want to quickly prototype a web synthesizer, hack quickly your idea but can be also used in production.\\n\\n### Platform agnosticism\\nNo matter if you want to create a website that interacts with MIDI, a node.js application, or a mobile application written in React Native, you should be able to use MIDIVal in the same way. All implementation details are hidden away in the abstractions and switching between platforms requires minimal setup. The browser implementation is already public and the node and React Native bindings will follow.\\n\\n### Extendability\\nMIDI devices come in many different shapes and forms \u2014 you can use the same messages to control your synthesizer, software effect, set control surface lights, and much more. It is not possible to write a single library to cover all devices and uses. That\u2019s why MIDIVal can be easily extended. You can easily extend the basic functionality and if you need more control over the messages you can still send raw data, including SysEx.\\n\\n## MIDIVal 101 \u2014 interacting with your device\\n\\n### Installation\\n\\nTo install MIDIVal you need to install `@midival/core` package using your favorite package manager:\\n\\n```bash\\nnpm --save install @midival/core\\n# OR\\nyarn add @midival/core\\n```\\n\\n### Sending MIDI messages to your device\\nLet\u2019s get started with MIDIVal and send a note to the first connected MIDI interface.\\n\\n```ts\\nimport MIDIVal, { MIDIValOutput } from \\"@midival/core\\";\\n\\nMIDIVal.connect()\\n.then(async ({outputs}) => {\\n  const firstInput = new MIDIValOutput(outputs[0]);\\n  firstInput.sendNoteOn(60, 128);\\n  await delay(1000);\\n  firstInput.sendNoteOff(60);\\n});\\n```\\n\\nThe code above waits for the MIDIVal interface to be connected then connects to the first output and plays the C4 note (MIDI Value 60) for a second. Implementation of delay function was omitted for simplicity. You can also send other parameters like Control Change and Program Change easily:\\n\\n```ts\\nfirstInput.sendControlChange(7, 100); // changing channel volume: Control Number 7\\nfirstInput.sendProgramChange(39); // sets Synth Bass 1 (if instrument implements General MIDI instruments)\\n```\\n\\n### Reading MIDI messages\\nSimilarly, you can read MIDI messages sent by your device (for example MIDI controller, control surface, etc).\\n\\n```ts\\nimport MIDIVal, { MIDIValInput } from \\"@midival/core\\";\\n\\nMIDIVal.connect()\\n.then(async ({ inputs }) => {\\n\\tconst input = new MIDIValInput(inputs[0]);\\n  input.onAllNoteOn((note, midiMessage) => {\\n    console.log(`Note ${note} has been pressed`);\\n  });\\n});\\n```\\n\\nThe code above connects to the first input interface and subscribes to all notes on messages. All .onX methods return callbacks which can be used to unsubscribe. Similarly, you can subscribe to messages for notes off, control change, program change, and even arbitral SysEx data. If you want to filter out the messages (listen to a specific key being pressed or a specific control key), you can do so:\\n\\n```ts\\ninput.onControlChange(5, (midiMessage) => {\\n\\tconsole.log(`Portamento changed to: ${midiMessage.data2}`);\\n})\\n```\\n\\nThe code above listens to all portamento changes (channel 5).\\n\\nThose are just a few examples of how to get started. For full documentation head to the [official documentation](https://midival.github.io/core/)."}]}')}}]);