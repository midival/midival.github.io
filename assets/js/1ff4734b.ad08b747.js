"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8699],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>v});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=i,v=p["".concat(l,".").concat(g)]||p[g]||m[g]||a;return t?o.createElement(v,r(r({ref:n},u),{},{components:t})):o.createElement(v,r({ref:n},u))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<a;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=t(7462),i=(t(7294),t(3905));const a={sidebar_position:3},r="MIDI Input Overview",s={unversionedId:"overview/midi-input-overview",id:"overview/midi-input-overview",title:"MIDI Input Overview",description:"Overview",source:"@site/docs/01-overview/03-midi-input-overview.md",sourceDirName:"01-overview",slug:"/overview/midi-input-overview",permalink:"/docs/overview/midi-input-overview",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Finding MIDI Devices",permalink:"/docs/overview/finding-devices"},next:{title:"MIDI Output Overview",permalink:"/docs/overview/midi-output-overview"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Recieving Notes On",id:"recieving-notes-on",level:2},{value:"Recieving Specific Note On",id:"recieving-specific-note-on",level:3},{value:"Recieving Notes Off",id:"recieving-notes-off",level:2},{value:"Recieving Specific Note Off",id:"recieving-specific-note-off",level:3},{value:"Recieving CC (Control Change) messages",id:"recieving-cc-control-change-messages",level:2},{value:"Recieving all CC messages",id:"recieving-all-cc-messages",level:3},{value:"Recieving specific CC messages",id:"recieving-specific-cc-messages",level:3},{value:"Using named messages",id:"using-named-messages",level:3},{value:"Transforming CC to human readable values",id:"transforming-cc-to-human-readable-values",level:3}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"midi-input-overview"},"MIDI Input Overview"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MIDIValInput")," class provides many useful methods for interacting with incomming messages. The document above describes the most popular ones, for most comprehensive list please refer to ",(0,i.kt)("a",{parentName:"p",href:"https://midival.github.io/core/classes/index.MIDIValInput.html"},(0,i.kt)("inlineCode",{parentName:"a"},"@midival/core")," API documentation"),"."),(0,i.kt)("p",null,"All of the methods presented below return unsubscribe callback which can be called to unsubscribe from the event. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const unsubscribe = input.onAllNoteOn((msg) => console.log(msg))\n\nsetTimeout(unsubscribe, 10000); // unsubscrbe after 10s.\n")),(0,i.kt)("h2",{id:"recieving-notes-on"},"Recieving Notes On"),(0,i.kt)("p",null,"Once you have instantiated ",(0,i.kt)("inlineCode",{parentName:"p"},"MIDIValInput")," class, you can start recieving Note on messages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"input.onAllNoteOn(message => {\n    console.log(`[Note On] Note: ${mesage.note} Velocity: ${message.velocity} Channel: ${message.channel}`)\n})\n")),(0,i.kt)("p",null,"You can easily extract MIDI note value (for example 60 for C4), Velocity (value between 0-127) and channel (1-16)."),(0,i.kt)("h3",{id:"recieving-specific-note-on"},"Recieving Specific Note On"),(0,i.kt)("p",null,"You can also subscribe to recieve only specific note on. This might be helpful when building drum machine where each note corresponds to separate sample and is generated separately."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"input.onNoteOn(60, triggerHighHat)\ninput.onNoteOn(62, triggerSnareDrum)\ninput.onNoteOn(64, triggerBassDrum)\n// etc.\n")),(0,i.kt)("h2",{id:"recieving-notes-off"},"Recieving Notes Off"),(0,i.kt)("p",null,"Similarly to recieving notes on, you can recieve note off message for every note:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"input.onAllNoteOff(message => {\n    console.log(`[Note Off] Note: ${message.note} Velocity: ${message.velocity} Channel: ${message.channel}`)\n})\n")),(0,i.kt)("p",null,"You can extract MIDI note value, channel (1-16) and velocity (in most cases equal to 0 although some of the synthesisers can assign an extra information, for example ",(0,i.kt)("a",{parentName:"p",href:"https://rolisupport.freshdesk.com/support/solutions/articles/36000019157-what-is-5d-touch-"},"Roli products assign Lift")," as part of their 5D touch model)"),(0,i.kt)("h3",{id:"recieving-specific-note-off"},"Recieving Specific Note Off"),(0,i.kt)("p",null,"Like with Note On message, you can subscribe only to specific note off messages which might be helpful for drum machines"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"input.onNoteOff(60, stopHighHat)\ninput.onNoteOff(62, stopSnareDrum)\ninput.onNoteOff(64, stopBassDrum)\n")),(0,i.kt)("h2",{id:"recieving-cc-control-change-messages"},"Recieving CC (Control Change) messages"),(0,i.kt)("p",null,"You can subscribe to specific CC messages. Those are usually send when user changes value on their MIDI keyboard using control knob, slider or digital screen. Similarly to note on / off messages, you can subscribe to all of them or only specific commands"),(0,i.kt)("h3",{id:"recieving-all-cc-messages"},"Recieving all CC messages"),(0,i.kt)("p",null,"To recieve all CC messages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"input.onAllControlChangeMessage(msg => {\n    console.log(`[CC] Control: ${msg.control} Value: ${msg.value} Channel: ${msg.channel}`)\n})\n")),(0,i.kt)("h3",{id:"recieving-specific-cc-messages"},"Recieving specific CC messages"),(0,i.kt)("p",null,"To recieve specific CC messages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"input.onControlChangeMessage(1, msg => {\n    console.log(`Modulation wheel value: ${msg.value}`)\n})\n")),(0,i.kt)("h3",{id:"using-named-messages"},"Using named messages"),(0,i.kt)("p",null,"Using control numbers to select or filter CC messages might be time consuming, unreadable and prone to errors. To prevent that, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"@midival/constants")," package to provide nicer interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ControlChange } from '@midival/constants'\n\ninput.onControlChangeMessage(ControlChange.ModulationWheel, msg => {\n    console.log(`Modulation wheel value: ${msg.value}`)\n})\n")),(0,i.kt)("h3",{id:"transforming-cc-to-human-readable-values"},"Transforming CC to human readable values"),(0,i.kt)("p",null,"Sometimes you want to use human readable values for your controls, either in the interface on in your debug logs. To help with that, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"ControlChangeToReadableName")," map from ",(0,i.kt)("inlineCode",{parentName:"p"},"@midival/constants")," package. This is especially helpful when dealing with ",(0,i.kt)("inlineCode",{parentName:"p"},"onAllControlChangeMessage")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ControlChangeToReadableName } from '@midival/constants'\n\ninput.onAllControlChangeMessage(({ control, value }) => {\n    console.log(`[CC] ${ControlChangeToReadableName[control]}: ${value}`)\n})\n")))}m.isMDXComponent=!0}}]);