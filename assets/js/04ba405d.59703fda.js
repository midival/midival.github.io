"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2736],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={slug:"midival-0-0-14",title:"MIDIVal release 0.0.14",authors:["kulak"],tags:["midival","release","midi clock"]},i=void 0,l={permalink:"/blog/midival-0-0-14",source:"@site/blog/2021-09-07-release-0014/index.md",title:"MIDIVal release 0.0.14",description:"Pitch Bend, manufacturer field and filtering MIDI devices has landed!",date:"2021-09-07T00:00:00.000Z",formattedDate:"September 7, 2021",tags:[{label:"midival",permalink:"/blog/tags/midival"},{label:"release",permalink:"/blog/tags/release"},{label:"midi clock",permalink:"/blog/tags/midi-clock"}],readingTime:1.615,hasTruncateMarker:!0,authors:[{name:"Kacper Kula",title:"Author and Maintainer of MIDIVal",url:"https://github.com/kulak-at",imageURL:"https://avatars.githubusercontent.com/u/2923943?v=4",key:"kulak"}],frontMatter:{slug:"midival-0-0-14",title:"MIDIVal release 0.0.14",authors:["kulak"],tags:["midival","release","midi clock"]},prevItem:{title:"MIDIVal 0.0.16: now with MIDI Clock support",permalink:"/blog/midival-0-0-16-with-midi-clock-support"},nextItem:{title:"Introducing MIDIVal: the easiest way to interact with MIDI in your browser",permalink:"/blog/midival-introduction"}},s={authorsImageUrls:[void 0]},c=[{value:"Support for Pitch Bend",id:"support-for-pitch-bend",level:2},{value:"Manufacturer field is now exposed",id:"manufacturer-field-is-now-exposed",level:2},{value:"Ability to listen to subset of devices",id:"ability-to-listen-to-subset-of-devices",level:2},{value:"Changes to <code>.onLocalControlChange</code>",id:"changes-to-onlocalcontrolchange",level:2},{value:"New Methods",id:"new-methods",level:2},{value:"What\u2019s next?",id:"whats-next",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Pitch Bend, manufacturer field and filtering MIDI devices has landed!\n",(0,a.kt)("img",{alt:"MIDIVal Cover",src:n(1086).Z,width:"2000",height:"1125"})),(0,a.kt)("p",null,"The new version of MIDIVal has been just released with many improvements! Here\u2019s the summary."),(0,a.kt)("h2",{id:"support-for-pitch-bend"},"Support for Pitch Bend"),(0,a.kt)("p",null,"Pitch bend in an expression tool allowing you to shift up and down notes that you are playing, commonly used for bend or vibratto effect. MIDI standard provides a way to send pitch bend messages as 14-bit numbers, but because the whole protocol is 8-bit, a bit more extra work is needed to encode and decode such messages. The new MIDIVal version converts those messages to the range between -1.0 and 1.0 so you don\u2019t have to worry about the implementation details anymore. It works seemlesly with both MIDIValInput and MIDIValOutput object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'input.onPitchBend((bend, midiMessage) => {\n   console.log("BEND:", bend); // value in range of <-1.0, 1.0>\n});\n\u200b\noutput.sendPitchBend(0.5);\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".sendPitchBend")," throws an error when trying to send a value from outside the range."),(0,a.kt)("h2",{id:"manufacturer-field-is-now-exposed"},"Manufacturer field is now exposed"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"IMIDIInput")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"IMIDIOutput")," (as well as their implementations) now expose manufacturer property which can be helpful when filtering the devices you want to connect to."),(0,a.kt)("h2",{id:"ability-to-listen-to-subset-of-devices"},"Ability to listen to subset of devices"),(0,a.kt)("p",null,"Sometimes you want to listen to a specific device being connected or a device from a specific manufacturer. Now you can do it using either exact string matching or regex in the following way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"MIDIVal.onInputDeviceWithConfigConnected({\n  manufacturer: /Korg/i,\n  name: /^minilogue/i\n}, (device: MIDIValInput) => {\n   console.log(device);\n});\n")),(0,a.kt)("h2",{id:"changes-to-onlocalcontrolchange"},"Changes to ",(0,a.kt)("inlineCode",{parentName:"h2"},".onLocalControlChange")),(0,a.kt)("p",null,"The callback for ",(0,a.kt)("inlineCode",{parentName:"p"},"onLocalControlChange")," method now takes boolean as a first parameter."),(0,a.kt)("h2",{id:"new-methods"},"New Methods"),(0,a.kt)("p",null,"Added new methods for Control Change modes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".onOmniModeOff")),(0,a.kt)("li",{parentName:"ul"},".",(0,a.kt)("inlineCode",{parentName:"li"},"onOmniModeOn")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".onMonoModeOn")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".onPolyModeOn"))),(0,a.kt)("h2",{id:"whats-next"},"What\u2019s next?"),(0,a.kt)("p",null,"For the next version of the library I plan to add methods for handling MIDI Clock \u2014 this is an exciting milestone that will enable to synchronise your browser with your MIDI device beat or send the clock signal to the device."))}p.isMDXComponent=!0},1086:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/cover-6cd5a26a4b0b0fc19a7e6d2ce84b8424.webp"}}]);